features<-read.table("features.txt")                     ## 561 Variable Names/# -- measurements and calculations
activity_labels<-read.table("activity_labels.txt")       ## 6 activity names -- in column 2
activity_labels<-as.char(activity_labels$V2)             ## Just store the name as a single column of names
setwd("~/Desktop/Coursera/UCI_data/test")
x_test<-read.table("x_test.txt")                        ## 561 Variables, 2947 observations
subject_test<-read.table("subject_test.txt")            ## Matches each observation to a subject ID # - 2947 obs
y_test<-read.table("y_test.txt")                        ## Matches each observation to an activity # - 2947 obs
## Read all the test data
setwd("~/Desktop/Coursera/UCI_data/test/Inertial Signals")
body_gyro_x_test<-read.table("body_gyro_y_test.txt")    ## Vector of length 128 for each obs -- 2947 obs
body_gyro_y_test<-read.table("body_gyro_y_test.txt")    ## Vector of length 128 for each obs -- 2947 obs
body_gyro_z_test<-read.table("body_gyro_y_test.txt")    ## Vector of length 128 for each obs -- 2947 obs
total_acc_x_test<-read.table("total_acc_y_test.txt")    ## Vector of length 128 for each obs -- 2947 obs
total_acc_y_test<-read.table("total_acc_y_test.txt")    ## Vector of length 128 for each obs -- 2947 obs
total_acc_x_test<-read.table("total_acc_y_test.txt")    ## Vector of length 128 for each obs -- 2947 obs
body_acc_x_test<-read.table("body_acc_y_test.txt")      ## Vector of length 128 for each obs -- 2947 obs
body_acc_y_test<-read.table("body_acc_y_test.txt")      ## Vector of length 128 for each obs -- 2947 obs
body_acc_z_test<-read.table("body_acc_y_test.txt")      ## Vector of length 128 for each obs -- 2947 obs
## Read all the training data
setwd("~/Desktop/Coursera/UCI_data/train")
x_train<-read.table("x_train.txt")
subject_train<-read.table("subject_train.txt")            ## Matches each observation to a subject ID # 7352 obs
y_train<-read.table("y_train.txt")                        ## Matches each observation to an activity # 7352 obs
setwd("~/Desktop/Coursera/UCI_data/train/Inertial Signals")
body_gyro_x_train<-read.table("body_gyro_y_train.txt")   ## Vector of length 128 for each obs # 7352 obs
body_gyro_y_train<-read.table("body_gyro_y_train.txt")   ## Vector of length 128 for each obs # 7352 obs
body_gyro_z_train<-read.table("body_gyro_y_train.txt")   ## Vector of length 128 for each obs # 7352 obs
total_acc_x_train<-read.table("total_acc_y_train.txt")   ## Vector of length 128 for each obs # 7352 obs
total_acc_y_train<-read.table("total_acc_y_train.txt")   ## Vector of length 128 for each obs # 7352 obs
total_acc_x_train<-read.table("total_acc_y_train.txt")   ## Vector of length 128 for each obs # 7352 obs
body_acc_x_train<-read.table("body_acc_y_train.txt")     ## Vector of length 128 for each obs # 7352 obs
body_acc_y_train<-read.table("body_acc_y_train.txt")     ## Vector of length 128 for each obs # 7352 obs
body_acc_z_train<-read.table("body_acc_y_train.txt")     ## Vector of length 128 for each obs # 7352 obs
## MERGE THE TRAIN / TEST OBSERVATIONS, FIX ACTIVITIES AND ALL VARIABLE LABELS
## Merge test and train into a single file
## For our use, we require Subject ID,  Activity IDs, and Feature Measurements contained in  x_test / x_train
## The actual vector 128 measures (window sampling) for each observation will not be used
## These values are raw data and the mean and standard deviation are already calcuated in x_test & x_train
## Thus I am dropping this raw data from the table now.
## Merge test and train rows to 3 single files of 2947 + 7352 observations -- 10299
feature_measures<-rbind(x_test,x_train)
subject_ids<-rbind(subject_test,subject_train)
activities<-rbind(y_test,y_train)
## Preliminary Label Columnns
colnames(feature_measures)<-(features$V2)        ## Second column contains the actual names
colnames(subject_ids)<-c("Subject")
## Convert Activity #'s to Actual Activity Names
max<-nrow(activities)                   ## Should be 10299 Observations
for (i in 1:max) {
x<-as.integer(activities[i,1])  ## Determine the right label
z<-activity_labels[x,1]         ## Select the right label
activities[i,1]<-z              ## Replace Activity # with Activity Label
}
activity_labels<-as.matrix(activity_labels)
colnames(activities)<-c("Activity")
## Extract Mean and Std Calculations
x<-select(feature_measures, contains("mean"))
y<-select(feature_measures, contains("std"))
selected_features<-cbind(x,y)
## Apply descriptive variable names in readable English
names_to_fix<-colnames(selected_features)
names_to_fix<-gsub("([[:lower:]])([[:upper:]])", "\\1 \\2", names_to_fix)  ## Space out the words
names_to_fix<-sub("t ", "Total ", names_to_fix)                            ## Full words, not just letters
names_to_fix<-sub("f ", "Fourier ", names_to_fix)
names_to_fix<-sub("-mean()", " Mean", names_to_fix)                        ## Other Aesthetics
names_to_fix<-sub("-std()", " Std", names_to_fix)
names_to_fix<-sub("Body Body", "Body", names_to_fix)
names_to_fix<-sub("()()-", " - ", names_to_fix)
names_to_fix<-sub("angle", "Angle ", names_to_fix)
names_to_fix<-sub("gravity", "Gravity", names_to_fix)
names_to_fix<-sub(",", ", ", names_to_fix)
colnames(selected_features)<-c(names_to_fix)
## COMBINE INTO A SINGLE TABLE -- DIRECTIONS 1 TO 5 NOW COMPLETE
master_set<-cbind(subject_ids, activities, selected_features)
## CREATE THE FINAL, TIDY DATA SET of AVERAGES  - DIRECTION 6
## Calculate Averages, Per Subject, Per Activity and stores all in a "pre-tidy" structure
## Uses three loops to iterate through subjects, activities and our selected feature set
## Uses the original labels set though all are presented as averages of the larger measurement sets
master_set<-arrange(master_set, Subject, Activity)              # Pre-Sort to facilitate looping
number_subjects<-nrow(unique(subject_ids))                      # Element counts for structure and loop sizing
number_activities<-nrow(activity_labels)
number_selected_features<-length(names_to_fix)
rows_in_pre_tidy<-number_subjects*number_activities             # Determine dimensions for the new data frame
cols_in_pre_tidy<-2+number_selected_features
pre_tidy<-as.data.frame(matrix(nrow = rows_in_pre_tidy, ncol = cols_in_pre_tidy))  # Initialize the data frame
colnames(pre_tidy)<-c("Subject", "Activity", c(names_to_fix))                      # Add in the labels
## Nested loops calculate the mean for sets of data associated with subject and activity
## And store in the proper position on the now initialized "pre-tidy" matrix
loop_counter<-0                                                         # initialize a counter
for (a in 1:number_subjects) {
by_subject<-filter(master_set, Subject==a)
for (b in activity_labels) {                                   # Each subject has activities
by_activity<-filter(by_subject, Activity==b )
loop_counter<-loop_counter+1
for (c in 1:number_selected_features) {
by_feature<-select(by_activity[c+2])            # Select each feature in turn
meanie<-mean(by_feature[[1]])                   # Calculate the mean
pre_tidy[loop_counter,1]<-a                     # Build the row - Subject
pre_tidy[loop_counter,2]<-b                     # Build the row - Activity
pre_tidy[loop_counter,c+2]<-meanie              # Build the row - Means for each Feature
}}}
##  With all data stored in a single table, it remains now to apply "tidy" data principles in the organization
##
?as.char
?as.character
View(activity_labels)
View(activity_labels)
View(activity_labels)
View(activity_labels)
names_to_fix
library*nlme0
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot
print(xyplot)
diet
?xyplot
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess"
)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?download
download(
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", method="curl")
download.file(
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", method="curl")
?download.file
download.file(
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quizdata.csv", method="curl")
read.csv(quizdata.csv)
ls
?
)
setwd("~/Desktop/Coursera")
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quizdata.csv", method="curl")
setwd("~/Desktop/Coursera")
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quizdata.csv", method="curl")
download.file(
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quizdata.csv", method="curl")
read.csv(quizdata.csv)
?read.csv
crap<-read.csv(quizdata.csv, header="TRUE")
crap<-read.csv("quizdata.csv", header="TRUE")
crap<-read.csv("quizdata.csv", header=TRUE)
CRAP
crap
crap<-read.csv("quizdata.csv", header=TRUE)
agricultureLogical<-subset(crap, ACR>10 & AGS=6)
crap<-read.csv("quizdata.csv", header=TRUE)
agricultureLogical<-subset(crap, ACR>10 & AGS==6)
agricultureLogical<-transform(crap, x=ACR>10, y=AGS==6)
View(agricultureLogical)
View(agricultureLogical)
stuff<-agriculture$x
stuff<-agricultureLogical$x
stuff
stuff2<-agricultureLogical$y
stuff2
agricultureLogical<-transform(crap, x=ACR>3, y=AGS==6)
?which
newdata <- agricultureLogical[ which(agricultureLogical$x==TRUE
& agricultureLogical$y == TRUE, ]
newdata <- which(agricultureLogical$x==TRUE
& agricultureLogical$y == TRUE,
)
newdata
print(newdata)
which(agricultureLogical$x==TRUE
& agricultureLogical$y == TRUE
)
crap<-read.csv("quizdata.csv", header=TRUE)
agricultureLogical<-transform(crap, x=ACR>3, y=AGS==6)
newdata <- which(agricultureLogical$x==TRUE
& agricultureLogical$y == TRUE)
newdata
newdata <- which(agricultureLogical$x=="TRUE"
& agricultureLogical$y == "TRUE")
newdata
newdata <- agricultureLogical[which(agricultureLogical$x=="TRUE"
& agricultureLogical$y == "TRUE"), ]
stuff1<-acgricultureLogical$x
stuff1<-agricultureLogical$x
stuff2<-agricultureLogical$y
stuff1
crap<-read.csv("quizdata.csv", header=TRUE)
agricultureLogical<-transform(crap, x=ACR=3, y=AGS==6)
newdata <- agricultureLogical[which(agricultureLogical$x=="TRUE"
& agricultureLogical$y == "TRUE"), ]
crap<-read.csv("quizdata.csv", header=TRUE)
agricultureLogical<-transform(crap, x=ACR==3, y=AGS==6)
newdata <- agricultureLogical[which(agricultureLogical$x=="TRUE"
& agricultureLogical$y == "TRUE"), ]
## agricultureLogical<-subset(crap, ACR>10 & AGS==6)
# newdata <- mydata[ which(mydata$gender=='F' & mydata$age > 65), ]
View(newdata)
View(newdata)
install.packages("jpeg")
library(jpeg)
?jpeg
jpeg("jeff.jpg")
jpeg("jeff.jpg")
x<-jpeg("jeff.jpg")
x
x<-readJPEG(jeff.jpg, native = TRUE)
x<-readJPEG("jeff.jpg", native = TRUE)
x
down vote
Use quantile function
quantile(x, c(.30, .80))
x<-read.csv("file1.csv", header=TRUE)
y<-read.csv("file2.csv", header=TRUE)
merged.data <- merge(x, y, by="CountryCode")
merged.data <- merge(y, x, by="CountryCode")
View(x)
View(x)
colnames(x)<-c("CountryCode")
merged.data <- merge(y, x, by="CountryCode")
View(merged.data)
?arrange
library(dplyr)
?filter
zippy<-arranged(merged_data, NA.3)
zippy<-arrang(merged_data, NA.3)
zippy<-arrange(merged_data, NA.3)
zippy<-arrange(merged.data, NA.3)
zippy[13]
View(y)
View(y)
View(zippy)
View(zippy)
zippy<-arrange(merged.data, NA.3)
transform(merged.data, NA.3 = as.numeric(NA.3)
)
zippo<-transform(merged.data, NA.3 = as.numeric(NA.3)
)
zippy<-arrange(merged.data, NA.3)
View(zippy)
View(zippy)
zippy<-arrange(zippo, NA.3)
View(zippy)
View(zippy)
View(zippo)
View(zippo)
zippo<-transform(merged.data, NA.3 = as.char(NA.3)
)
zippo<-transform(merged.data, NA.3 = as.chararcter(NA.3))
zippy<-as.table(merged.data)
zippy<-as.dataframe(merged.data)
zippy<-as.data.frame(merged.data)
zippo<-transform(merged.data, NA.3 = as.character(NA.3))
zippo<-transform(merged.data, NA.3 = as.number(NA.3))
zippo<-transform(merged.data, NA.3 = as.numeric(NA.3))
zippo<-transform(merged.data, NA.3 = as.character(NA.3))
zippo<-transform(merged.data, NA.3 = as.integer(NA.3))
zippo<-transform(merged.data, NA.3 = as.character(NA.3))
zippo<-transform(merged.data, NA.3 = as.numeric(as.character(NA.3)))
zippo<-transform(merged.data, NA.3 = as.character(NA.3))
zippo<-transform(zippo, NA.3 = as.numeric(NA.3))
View(zippo)
View(zippo)
zippo<-transform(merged.data, NA.3 = as.character(NA.3))
class(zippo)
zippy<-transform(merged.data, NA.3 = as.numeric(NA.3))
?as.numeric
zippy<-transform(merged.data, NA.3 = as.numeric(gsub(",","",NA.3))
)
zippy<-arrange(zippy, NA.3)
?arrange
zippy<-arrange(zippy, desc(NA.3)
)
zippy$13
zippy(,13)
zippy[,13]
zippy[1,13]
zippy[13,1]
View(zippy)
View(zippy)
zippy[NA.3]
zippy$NA.3
zippy<-transform(merged.data, NA.3 = as.numeric(as.character(gsub(",","",NA.3)))
)
zippy<-arrange(zippy, NA.3)
View(zippy)
View(zippy)
summarize(zippy)
summary(zippy)
x<-summary(zippy)
lookatme<-zippy[which(zippy$Income.Group=="High income: OECD")]
zippy$Income.Grup
zippy$Income.Group
lookatme<-which(zippy$Income.Group=="High income: OECD")
lookatme<-zippy[which(zippy$Income.Group=="High income: OECD",)]
lookatme<-which(zippy$Income.Group=="High income: OECD",)
lookatme<-which(zippy$Income.Group=="High income: OECD",)
lookatme<-zippy[which(zippy$Income.Group=="High income: OECD"),]
View(lookatme)
View(lookatme)
lookatme<-transform(lookatme, NA = as.numeric(as.character(gsub(",","",NA))))
lookatme<-transform(lookatme, NA.=as.numeric(as.character(NA.))
)
meanie<-mean(lookatme$NA)
meanie<-mean(lookatme["NA"])
meanie<-mean(lookatme["NA."])
meanie<-mean(lookatme[[33])
meanie<-mean(lookatme[[33]])
meanie
lookatme$33
lookatme[[33]]
lookatme$NA.
meanie<-mean(lookatme$NA)
meanie<-mean(lookatme$NA.)
meanie
lookatme<-transform(zippy, NA = as.numeric(as.character(gsub(",","",NA))))
lookatme<-transform(zippy, NA. = as.numeric(as.character(NA.)))
tableOne <- within(lookatme, quartile <- as.integer(cut(NA., quantile(NA., probs=0:5/5), include.lowest=TRUE)))
?quantile
tableOne <- within(lookatme, quantile <- as.integer(cut(NA., quantile(NA., c(.20,.40,.60,.80,.100)
)
)
)
)
tableOne <- within(lookatme, quantile <- as.integer(cut(NA., quantile(NA., c(.20,.40,.60,.80,.100)), na.rm=TRUE))
)
tableOne <- within(lookatme, quantile <- as.integer(cut(NA., quantile(NA., c(.20,.40,.60,.80,.100)), na.rm="TRUE"))
))
tableOne <- within(lookatme, quantile <- as.integer(cut(NA., quantile(NA., c(.20,.40,.60,.80,.100)), na.rm="TRUE"))
)
quantile(lookateme$NA.)
quantile(lookatme$NA.)
quantile(lookatme$NA., na.rm=TRUE)
tableOne<-within(lookatme, quantile<-(cut(NA., quantile(lookatme$NA., na.rm=TRUE))))
tableone$quantile
tableOne$quantile
View(tableOne)
View(tableOne)
tableOne<-within(lookatme, quantile<-(cut(NA., quantile(lookatme$NA., na.rm=TRUE))))
quantile(lookatme$NA., na.rm=TRUE
)
looker<-transform(zippy, NA.=as.numeric(as.character(NA.))
)
looker<-arrange(looker, NA.)
View(looker)
View(looker)
zippy<-transform(merged.data, NA.3 = as.numeric(as.character(gsub(",","",NA.3))))
quantile(lookatme$NA., na.rm=TRUE
lookatme<-zippy[which(zippy$Income.Group=="High income: OECD"),]
View(lookatme)
View(lookatme)
merged.data <- merge(y, x, by="CountryCode", all=false)
merged.data <- merge(y, x, by="CountryCode")
merged.data <- merge(y, x, by="CountryCode")
x<-read.csv("file1.csv", header=TRUE)
y<-read.csv("file2.csv", header=TRUE)
merged.data <- merge(y, x, by="CountryCode" "X")
merged.data <- merge(y, x, by y="CountryCode", by x="X", all=FALSE)
merged.data <- merge(y, x, by.y="CountryCode", by.x="X", all=FALSE)
merged.data <- merge(y,x ,by=c("CountryCode,"X"), all=false)
merged.data <- merge(y, x, by=c("CountryCode,"X"), all=false)
merged.data <- merge(y, x, by=c("CountryCode,"X"))
merged.data <- merge(y, x, by=c("CountryCode "X"))
merged.data <- merge(y,x,by=c("CountryCode","X."))
merged.data <- merge(y,x,by=c("CountryCode","X"))
View(x)
View(x)
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp()
shiny::runApp()
setwd("~/Desktop/Coursera/App-2")
shiny::runApp()
shiny::runApp('App-2')
shiny::runApp()
shiny::runApp()
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-2')
library(shiny)
library(ggplot2)
oj <- read.table("data/oj_pop")
acid<-read.table("data/acid_pop")
roundUp<-function(x) ceiling(max(x)/1)
setwd("~/Desktop/Coursera/App-2")
library(shiny)
library(ggplot2)
oj <- read.table("data/oj_pop")
acid<-read.table("data/acid_pop")
roundUp<-function(x) ceiling(max(x)/1)
shiny::runApp()
oj <- read.table("data/oj_pop")
acid<-read.table("data/acid_pop")
## Simple spaghetti plots to explore the data
## Adding a subject ID column based on my ASSUMPTIONS
c<-1
id<-c(1:60)
for (a in 1:6) {
for(b in 1:10) {
id[c]<-b
c<-c+1}
}
ToothGrowth<-cbind(ToothGrowth, id)
## Separate Populations -- length and dose
oj_pop<-ToothGrowth[which(ToothGrowth$supp=='OJ'),-2]
acid_pop<-ToothGrowth[which(ToothGrowth$supp=='VC'),-2]
## Simple spaghetti plots to explore the data
p1<-ggplot(oj_pop,
aes(x = dose, y = len, group=id)
) +geom_line(aes(color = factor(id))) +labs(title="Orange Juice Population")
p2<-ggplot(acid_pop,
aes(x = dose, y = len, group=id)
) +geom_line(aes(color = factor(id))) +labs(title="Ascorbic Acid Population")
multiplot(p1,p2)
library(multiplot)
View(acid_pop)
View(acid_pop)
library(ggplot2)
source("http://peterhaschke.com/Code/multiplot.R")
library(datasets)
data(ToothGrowth)
## Adding a subject ID column based on my ASSUMPTIONS
c<-1
hamster_id<-c(1:60)
for (a in 1:6) {
for(b in 1:10) {
hamster_id[c]<-b
c<-c+1}
}
ToothGrowth<-cbind(ToothGrowth, id)
## Separate Populations -- length and dose
oj_pop<-ToothGrowth[which(ToothGrowth$supp=='OJ'),-2]
acid_pop<-ToothGrowth[which(ToothGrowth$supp=='VC'),-2]
## Simple spaghetti plots to explore the data
p1<-ggplot(oj_pop,
aes(x = dose, y = len, group=hamster_id)
) +geom_line(aes(color = factor(hamster_id))) +labs(title="Orange Juice Population")
p2<-ggplot(acid_pop,
aes(x = dose, y = len, group=hamster_id)
) +geom_line(aes(color = factor(hamster_id))) +labs(title="Ascorbic Acid Population")
multiplot(p1,p2)
c<-1
hamster_id<-c(1:60)
for (a in 1:6) {
for(b in 1:10) {
hamster_id[c]<-b
c<-c+1}
}
ToothGrowth<-cbind(ToothGrowth, id)
## Separate Populations -- length and dose
oj_pop<-ToothGrowth[which(ToothGrowth$supp=='OJ'),-2]
acid_pop<-ToothGrowth[which(ToothGrowth$supp=='VC'),-2]
c<-1
id<-c(1:60)
for (a in 1:6) {
for(b in 1:10) {
id[c]<-b
c<-c+1}
}
ToothGrowth<-cbind(ToothGrowth, id)
## Separate Populations -- length and dose
oj_pop<-ToothGrowth[which(ToothGrowth$supp=='OJ'),-2]
acid_pop<-ToothGrowth[which(ToothGrowth$supp=='VC'),-2]
write.csv("acid_pop")
write.csv(acid_pop, "acid_pop")
write.csv(acid_pop, "oj_pop")
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(ggplot2)
oj <- read.table("data/oj_pop")
acid<-read.table("data/acid_pop")
roundUp<-function(x) ceiling(max(x)/1)
shiny::runApp()
shiny::runApp()
